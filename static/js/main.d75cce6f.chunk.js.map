{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","active","cases","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","option","fillColor","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d75cce6f.chunk.js","sourcesContent":["import { Card , CardContent , Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./InfoBox.css\";\r\n\r\n\r\nfunction InfoBox({title, active,cases,isRed,total, ...props}) {\r\n    /* ...props se remaining props aajynge agar koi hai\r\n    jo ki hai we had one more prop i.e onClick */\r\n    return (\r\n       <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}>\r\n       <CardContent>\r\n           <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n               {/* Title*/}\r\n              {title} \r\n           </Typography>\r\n           <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n           {/* No of cases*/}\r\n           {cases}\r\n           </h2>\r\n           <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n            \r\n               {total} Total\r\n           </Typography>\r\n           {/* total cases*/}\r\n       </CardContent>\r\n       </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","\r\n\r\nimport numeral from 'numeral';\r\nimport React from 'react';\r\nimport {Circle, Popup} from 'react-leaflet';\r\n// import numerical from 'numerical';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      option: { color:\"#cc1034\", fillColor: \"#cc1034\" },\r\n     //hex: \"#CC1034\",\r\n      //rgb: \"rgb(204, 16, 52)\",\r\n      //half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      /* size of circle */\r\n      multiplier: 800\r\n    },\r\n    recovered: {\r\n      option: { color:\"#7dd71d\", fillColor: \"#7dd71d\" },\r\n      // hex: \"#7dd71d\",\r\n      //rgb: \"rgb(125, 215, 29)\",\r\n      //half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      /* size of circle */\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      option: { color:\"#ff6c47\", fillColor: \"#ff6c47\" },\r\n      // hex: \"#fb4443\",\r\n      //rgb: \"rgb(251, 68, 67)\",\r\n     // half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      /* size of circle */\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n  /*Leaflet keeps changing its documentaiona and does not tell\r\n  pehle hex, rgb sab aise pass karte the but now \"pathOptions\" ka ek prop pass karna hai \r\n  and usme daalna hai sab */\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n/* this is to format the numerical library Eg 5400453 will become 5400.5 k */\r\n\r\n// sorting function to sort countries in decreasing order of the covid cases\r\n\r\n/* data arguement bahut bada object hai containing all the info\r\nabout all the countries and uss saare objects mein ek parameter hai \"cases:\r\nsee their api for json for more clearity\r\nso hum har object.cases ko copare karenge in descending order*/\r\n\r\nexport const sortData  =(data) =>{\r\n\r\n    // just copying all the data into an array\r\n    // ... se sara \"data\" copy hojayga\r\n    // else sortedData=[data] se ek array ban jeayga bas of \"data\" length jo ki nahi karna hume \r\n    const sortedData = [...data];\r\n    \r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases > b.cases)\r\n        return -1;\r\n        else return 1;\r\n    });\r\n    return sortedData;\r\n}\r\n\r\n// draw circles on map \r\nexport const showDataOnMap = (data, casesType='cases')=>\r\n     \r\n     data.map(country=> (\r\n         <Circle\r\n         center={[country.countryInfo.lat,country.countryInfo.long] }\r\n         fillOpacity={0.4}\r\n         pathOptions={casesTypeColors[casesType].option}\r\n         //color={casesTypeColors[casesType].hex}\r\n         // fillColor={casesTypeColors[casesType].hex}\r\n         radius={\r\n            Math.sqrt(country[casesType]/10) * casesTypeColors[casesType].multiplier\r\n          }\r\n         >\r\n             <Popup>\r\n                 <div className=\"info-container\">\r\n                     <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}} />\r\n                     <div className=\"info-name\"> {country.country}</div>\r\n                     <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                     <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                     <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n\r\n                 </div>\r\n             </Popup>\r\n         </Circle>\r\n     )\r\n);","import React from 'react'\r\n// import { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { MapContainer, TileLayer , useMap } from 'react-leaflet';\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from './util';\r\n\r\nfunction Map({countries, casesType,center, zoom }) {\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n      }\r\n    return (\r\n        <div className=\"map\">\r\n           <MapContainer\r\n           casesType={casesType}\r\n           center={center}\r\n           zoom={zoom} >\r\n       <ChangeView center={center} zoom={zoom} />\r\n                {/* Ye karna hi karna hai titlelayer mein see their documentaion*/}\r\n            <TileLayer\r\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n      {showDataOnMap(countries,casesType)}\r\n  </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\";\r\n// props arguement ki jagah destructure karke {countries } kar sakte hai instead of props.countries\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                <td>{country} </td>\r\n                <td><strong>{numeral(cases).format(\"0,0\")}</strong> </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120   \r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\nfunction LineGraph({casesType=\"cases\", ...props }) {\r\n    const [data,setData] = useState({});   \r\n\r\n  \r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n          });\r\n      };\r\n  \r\n      fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n           {/* optional chaining......if data.length nahi toh it does not panicks and returns the data undefined*/} \r\n            {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: \"Covid\",\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","\nimport './App.css';\nimport { MenuItem, Select , FormControl, Card, CardContent } from '@material-ui/core';\nimport React ,{ useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData , prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  // to store country name and code for all countries\n  const [countries,setCountries] = useState([]);\n\n  // jo bhi country select kare user\n  const [country,setCountry] = useState('worldwide');\n\n  // All the covid info and sab info about the selectd country\n  const [countryInfo, setCountryInfo] = useState({});\n\n  //All the covid info and sab info about all the countries table mein as a prop send karne ke liye\n  const [tableData ,setTableData]= useState([]);\n\n  const [mapCenter, setMapCenter]=useState({lat: 20.5937, lng: 78.9629 })\n\n  const [mapZoom, setMapZoom] = useState(3)\n\n  const [mapCountries, setMapCountries]=useState([])\n\n  const [casesType, setCasesType] = useState(\"cases\")\n  // https://disease.sh/v3/covid-19/countries\n  // useEffect runs code based on a condition\n\n  //initially to fetch data for worldwide\n  useEffect(()=>{\n    const url =\"https://disease.sh/v3/covid-19/all\" \n    \n     fetch(url)\n    .then((response)=>response.json())\n    .then((data)=>{\n      // initially the country=\"worlwide\"\n      setCountryInfo(data);\n    });\n    \n  },[])\n\n  // Initially ...BAs ek baar use karna hai to get info aabout country name and code\n  // and baaki saara data table ko send karna hai\n  useEffect(()=>{\n    // async send for req, & wait for it to come then only proceed\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries = data.map((country)=> (\n          { name: country.country,  // Eg India    (country name)\n            value: country.countryInfo.iso2     // Eg IN (country code)\n          }\n        ))\n        \n        setCountries(countries)\n        // data mein saara data hai so we 'll send this to the table\n        // now we need the countries in increasing order of the covid cases\n        // so we'll implement a sorted function and then pass the data through it to the table\n        let sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n      })\n    } \n    // wait for the url to send data so fetch se pehle await and \".then\" means jab data aajye then uss response \n    // ko json mein convert karke return \n    //.then firse means jab vo json data aaye then map through each object of that data\n    // and return an object having name and value\n    \n    // to implement the function\n    getCountriesData();\n    \n  },[]);\n\n  const onCountryChange = async (event)=>{\n      const countryCode = event.target.value;\n      // console.log(countryCode);\n      \n\n      const url = countryCode===\"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" \n      : `https://disease.sh/v3/covid-19/countries/${countryCode}` ;\n\n      // https://disease.sh/v3/covid-19/countries/{COUNTRY__CODE}\n      await fetch(url)\n      .then((response)=>response.json())\n      .then((data)=>{\n        setCountry(countryCode);\n        setCountryInfo(data);\n        \n        countryCode === \"worldwide\" \n        ? setMapCenter([34.80746, -40.4796])\n        : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === \"worldwide\"\n        ? setMapZoom(3)\n        : setMapZoom(4);\n        //setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n        //setMapZoom(4);\n      });\n      \n  };\n  // console.log(countryInfo);\n  return (\n    <div className=\"app\">\n\n   <div className=\"app__left\">\n     \n      {/* Header*/}\n      <div className=\"app__header\">\n     <h1>Covid Tracker </h1>\n     {/* Title + droppdown*/}\n     <FormControl className=\"app__dropdown\">\n       <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n       <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n         {/* Loop through all countries and show dropdown*/}\n         {countries.map((country)=> (\n           <MenuItem value={country.value} >{country.name}</MenuItem>\n           // value is country code \n         ))}\n      \n       </Select>\n     </FormControl>\n     </div>\n\n<div className=\"app__stats\">\n     <InfoBox \n     active={casesType===\"cases\"} \n     title=\"Covid cases\" \n     isRed\n     cases={prettyPrintStat(countryInfo.todayCases)}\n      total={prettyPrintStat(countryInfo.cases)}\n       onClick={e=> setCasesType(\"cases\")}  />\n     <InfoBox \n     active={casesType===\"recovered\"}\n      title=\"Recovered\" \n      cases={prettyPrintStat(countryInfo.todayRecovered)} \n      total={prettyPrintStat(countryInfo.recovered)} \n      onClick={e=> setCasesType(\"recovered\")}  />\n     <InfoBox \n     active={casesType===\"deaths\"}\n      title=\"Deaths\"\n      isRed\n       cases={prettyPrintStat(countryInfo.todayDeaths)}\n        total={prettyPrintStat(countryInfo.deaths)} \n        onClick={e=> setCasesType(\"deaths\")}  />\n     {/* Info box*/}\n     {/* Info box*/}\n     {/* Info box*/}\n</div>\n  \n     <Map casesType={casesType}  countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n     {/* Map*/}\n    </div>\n   \n   <Card className=\"app__right\">\n    <CardContent>\n    <div className=\"app__information\">\n    {/* Table*/}\n    <h3>Live cases by Country</h3>\n    <Table countries = {tableData} />\n    \n    <h3>Worldwide new {casesType}</h3>\n    {/* Graph*/}\n    <LineGraph casesType={casesType}/>\n    </div>\n    </CardContent>\n   </Card>\n\n\n   </div>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}